import pygame

class RealTimeGraph:
    def __init__(self, figsize=(5, 4), dpi=100):
        # initialize Pygame
        pygame.init()

        # set up the screen to match the Matplotlib figure size
        self.screen_width = int(figsize[0] * dpi)
        self.screen_height = int(figsize[1] * dpi)
        self.screen = pygame.display.set_mode((1920, 1080))

        # set up Matplotlib figure and axes
        self.fig, self.ax = plt.subplots(figsize=figsize, dpi=dpi)

        # create a plot_surface array with the dimensions of the Pygame surface
        self.plot_surface = np.zeros((self.screen_height, self.screen_width, 3), dtype=np.uint8)

        # initialize data structures
        self.xdata = []
        self.ydata = []
        self.data_hash = {}  # hash table
        self.tree = None     # binary search tree

    def handle_events(self):
        # handle Pygame events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

    def generate_data(self):
        # generate new data
        new_x = random.random()
        new_y = random.random()

        # update the data structures
        self.xdata.append(new_x)
        self.ydata.append(new_y)
        self.data_hash[len(self.xdata)-1] = (new_x, new_y)

        # update the tree
        class Node:
            def __init__(self, x, y):
                self.x = x
                self.y = y
                self.left = None
                self.right = None
        
        def insert(node, x, y):
            if node is None:
                return Node(x, y)
            if x < node.x:
                node.left = insert(node.left, x, y)
            else:
                node.right = insert(node.right, x, y)
            return node

        self.tree = insert(self.tree, new_x, new_y)

    def update_graph(self):
        # update the Matplotlib figure
        self.ax.clear()   # clear the previous plot
        self.ax.plot(self.xdata, self.ydata, c='r')
        self.ax.set_title('Real-time graph')
        self.ax.set_xlim(0, 1)
        self.ax.set_ylim(0, 1)

        # update the Matplotlib figure
        self.fig.canvas.draw()

        # copy the Matplotlib figure onto the Pygame surface
        self.plot_surface = np.frombuffer(self.fig.canvas.tostring_rgb(), dtype=np.uint8)
        self.plot_surface = self.plot_surface.reshape((self.screen_height, self.screen_width, 3))
        self.plot_surface = np.rot90(self.plot_surface, 1)   # rotate counterclockwise by 90 degrees
        self.plot_surface = np.flipud(self.plot_surface)   # flip the surface vertically
        pygame_surface = pygame.surfarray.make_surface(self.plot_surface)
        pygame.display.gl_set_attribute(pygame.GL_ACCELERATED_VISUAL, 1)
        self.screen.blit(pygame_surface, (700, 70))

        # # update the Pygame display
        pygame.display.update()


class Simulation:
    def __init__(self, width = 1600, height = 900, sim_width = 800, sim_height = 800):
        self.WIDTH = width
        self.HEIGHT = height
        self.sim_width = sim_height
        self.sim_height = sim_width
        
        self.inner_surface = pygame.Surface((sim_width, sim_height))
        
        pygame.font.init()
        
        font_file = "Anurati-Regular.otf"
        
        font = pygame.font.Font(font_file, 50)
        # Render the text
        self.text = font.render("M O D E L L I N G  M A L A R I A", True, (255, 255, 255))
        # Get the rectangle of the text
        self.text_rect = self.text.get_rect()
        # Center the text in the window
        self.text_rect.center = (self.WIDTH / 2, 30)
        
        # load the icon image
        icon = pygame.image.load("icon.png")

        # set the icon for the game window
        pygame.display.set_icon(icon)
        
        #A container class to hold and manage multiple Sprite objects in this case to manage each category of person and mosquito
        #pygame.sprite.Group objects act as a hashmap to all objects in the group
        self.susceptible_people_container = pygame.sprite.Group()
        self.semi_immune_people_container = pygame.sprite.Group()
        self.infected_people_container = pygame.sprite.Group()
        self.dead_container = pygame.sprite.Group()
        self.male_container = pygame.sprite.Group()
        self.immune_container = pygame.sprite.Group()
        self.susceptible_mosquito_container = pygame.sprite.Group()
        self.infected_mosquito_container = pygame.sprite.Group()
        self.all_container = pygame.sprite.Group()
        
        
    def start(self):
        
        #calc total population
        self.total_population = self.n_susceptible_mosquito + self.n_infected_mosquito
        
        #initiliases pygame window and display
        pygame.init()
        screen = pygame.display.set_mode([self.WIDTH, self.HEIGHT])
        pygame.display.set_caption("Malaria Sim")

        
        T = True
        #loop which updates all movements to the display
        while T:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    T = False
            
            graph = RealTimeGraph()

            graph.handle_events()
            graph.generate_data()
            graph.update_graph()
            
            self.all_container.update()
            
            screen.fill(background_col)
            self.inner_surface.fill(inner_surface_col)
            screen.blit(self.inner_surface, (80, 80)) # blit the inner surface to the main window surface
            
            #detects collision between infected mosq and suscpetible person and moves it to the infected container
            collision_group = pygame.sprite.groupcollide(self.susceptible_people_container,self.infected_mosquito_container,False,False)
            
            #
            #Draws All Objects on the Screen
            self.all_container.draw(screen)
            
            # Create font object
            font = pygame.font.SysFont(None, 30)
            
            # Blit text surfaces onto screen surface
            for i, text_surface in enumerate(text_surfaces):
                screen.blit(text_surface, (self.sim_width + 100, self.HEIGHT - self.sim_height + 160 - i*30))
            pygame.display.gl_set_attribute(pygame.GL_ACCELERATED_VISUAL, 1)
            screen.blit(self.text, self.text_rect)

            clock.tick(60)
            pygame.display.flip()


if __name__ == "__main__":
    malaria = Simulation()
    malaria.start()
    
# if __name__ == '__main__':
#     graph.run()


pygame.display.update()
