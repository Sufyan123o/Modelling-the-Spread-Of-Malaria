import pygame, sys
import numpy as np

susceptible_people_col = (211,211,211)
semi_immune_col = (144, 238, 144) #light green PKA WHITE
infected_people_col = (255, 0, 0) #infected people
dead_col = (0, 0, 0) #black
immune_col = (255, 165, 0)
male_mosq_col = (0, 100, 255) #BLUE
susceptible_mosquito_col = (50, 150, 50) #GREEN
infected_mosquitoes_col = (255,0,0) #red
background_col = (41, 70, 90)


class mosquito(pygame.sprite.Sprite):
    def __init__(
        self,
        x,
        y,
        width,
        height,
        color= dead_col,
        radius=5,
        velocity=[0, 0],
        randomize=False,
    ): #initialising the values for the human
        super().__init__()
        self.image = pygame.Surface([radius * 2, radius * 2]) #drawing mosquitos.
        self.image.fill(background_col)
        pygame.draw.circle(self.image, color, (radius, radius), radius)

        self.rect = self.image.get_rect()
        self.pos = np.array([x, y], dtype=np.float64) #store as np array
        self.vel = np.asarray(velocity, dtype=np.float64)

        self.killswitch_on = False
        self.recovered = False
        self.randomize = randomize

        self.WIDTH = width
        self.HEIGHT = height
    
    def update(self):

        self.pos += self.vel

        x, y = self.pos

        # Periodic boundary conditions
        if x < 0:
            self.pos[0] = self.WIDTH #if the person goes off screen it puts them on the other side
            x = self.WIDTH
        if x > self.WIDTH:
            self.pos[0] = 0
            x = 0
        if y < 0:
            self.pos[1] = self.HEIGHT
            y = self.HEIGHT
        if y > self.HEIGHT:
            self.pos[1] = 0
            y = 0

        self.rect.x = x
        self.rect.y = y
        


class Simulation:
    def __init__(self, width = 600, height = 480):
        self.WIDTH = width
        self.HEIGHT = height
        
        
        #A container class to hold and manage multiple Sprite objects in this case to manage each category of person and mosquito
        self.susceptible_people_container = pygame.sprite.Group()
        self.semi_immune_people_container = pygame.sprite.Group()
        self.infected_people_container = pygame.sprite.Group()
        self.dead_container = pygame.sprite.Group()
        self.immune_container = pygame.sprite.Group()
        self.male_container = pygame.sprite.Group()
        self.susceptible_mosquito_container = pygame.sprite.Group()
        self.infected_mosquito_container = pygame.sprite.Group()
        self.all_container = pygame.sprite.Group()
        
        
        self.n_susceptible_mosquito = 20
        self.n_infected_mosquito = 1
        self.T = 1000
        
    
    def start(self):
        
        self.N = self.n_susceptible_mosquito + self.n_infected_mosquito
        
        pygame.init()
        screen = pygame.display.set_mode([self.WIDTH, self.HEIGHT])
        
        for i in range(self.n_susceptible_mosquito):
            x = np.random.randint(0, self.WIDTH + 1)
            y = np.random.randint(0, self.HEIGHT + 1)
            vel = np.random.rand(2) * 2 - 1
            np.random.rand(2)
            
            susceptible_mosquito = mosquito(x, y, self.WIDTH, self.HEIGHT, color = susceptible_people_col, velocity = vel )
            
            self.susceptible_mosquito_container.add(susceptible_mosquito)
            self.all_container.add(susceptible_mosquito)
            
        for i in range(self.n_infected_mosquito):
            x = np.random.randint(0, self.WIDTH + 1)
            y = np.random.randint(0, self.HEIGHT + 1)
            vel = np.random.rand(2) * 2 - 1
            np.random.rand(2)
            
            infected_mosquito = mosquito(x, y, self.WIDTH, self.HEIGHT, color = infected_mosquitoes_col, velocity = vel )
            
            self.susceptible_mosquito_container.add(infected_mosquito)
            self.all_container.add(infected_mosquito)
        
        clock = pygame.time.Clock()
        
        T = 2000000000
        for i in range(T):
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    break
                    
                self.all_container.update()
                
                screen.fill(background_col)
                
                self.all_container.draw(screen)
                
                pygame.display.flip()
                
                clock.tick(60)
                

if __name__ == "__main__":
    covid = Simulation()
    covid.start()